[user]
	name = Réal Provencher-Deshler
	email = real.provencher.deshler@gmail.com
[credential]
	helper = osxkeychain
[push]
	default = current
[alias]
  s = status -s
  pl = pull
  plr = pull --rebase
  ps = push
  psf = push -f
  pst = push --tags
  f = fetch
  fa = fetch --all
  a = add
  aa = add --all
  ai = add -i
  ap = add -p
  an = add -AN
  cm = commit -m
  cnm = commit -nm
  cam = commit --amend --no-edit
  ce = commit -m \"empty commit\" --allow-empty
  co = checkout
  cob = checkout -b
  cot = checkout -t
  b = branch -vv # show local branches
  ba = branch -a # show remote branches too
  bd = branch -d # delete a branch
  bdd = branch -D # delete it even if it's not merged
  bda = "! f() { git branch --merged | grep -vE '(\\*|master)' | xargs -n 1 git branch -d; }; f" # delete all local branches that have been merged to HEAD
  bf = branch -f # force a branch to point to HEAD
  bu = "! f() { branchname=$(git symbolic-ref --short HEAD); git branch --set-upstream-to=origin/$branchname $branchname; }; f" # fix upstream tracking
  con = branch --contains
  st = stash
  stp = stash pop
  sta = stash apply
  std = stash drop
  stl = stash list
  stc = stash clear
  sts = "! f() { num=${1:-'0'}; hub stash show -p stash@{$num}; }; f"
  stb = stash branch
  cp = cherry-pick
  r = remote -v
  d = diff
  df = diff --stat
  ds = diff --staged
  bi = bisect
  res = reset
  resh = reset --hard HEAD
  pn = remote prune origin
  m = merge
  mm = merge origin/master
  mmm = "! f() { git checkout master && git pull && git checkout - && git merge -; }; f"
  rb = rebase
  rbm = rebase master
  rbi = rebase -i
  rbc = rebase --continue
  prc = pull-request -o
  prmks = pull-request -b TheRealest -o
  cl = clone
  clf = clean -f
  l = log --graph --decorate --oneline --pretty=format:"%C(yellow)%h\\ %Cgreen%cd%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --date=relative
  ll = log --graph --decorate --oneline --branches --pretty=format:"%C(yellow)%h\\ %Cgreen%cd%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --date=relative

  ls = log --graph --decorate --oneline --stat
  lf = log --follow -p
  tail = rev-list --max-parents=0 HEAD
  list = config --get-regexp ^alias\\.
  bw = browse
  bwp = browse -- pulls
  bwi = "! f() { hub browse -- issues/$1; }; f"
  lines-project = "! f() { printf \"Project total -- \"; git log --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: +%s, removed lines: -%s, net lines: %s\\n\", add, subs, loc }'; }; f"
  lines = "! f() { printf \"$@ -- \"; git log --author=\"$@\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: +%s, removed lines: -%s, net lines: %s\\n\", add, subs, loc }' -; }; git log --format='%aN' | sort | uniq | while read line ; do f \"$line\" ; done; printf \"\n\"; git lines-project"
  over = overwritten

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[diff]

    # Detect copies as well as renames
    renames = copies

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

# URL shorthands

[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"
